keycloak:
  client-id: store_microservices_client
  client-secret: "**********"
  token-uri: http://keycloak:8080/realms/store-microservices/protocol/openid-connect/token

spring:
  application:
    name: gateway
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://keycloak:8080/realms/store-microservices
  cloud:
    gateway:
      default-filters:
        - name: RequestRateLimiter
          args:
            '[redis-rate-limiter.replenishRate]': 10
            '[redis-rate-limiter.burstCapacity]': 20
        - name: Retry
          args:
            retries: 3
            statuses: BAD_GATEWAY
            methods: GET,POST
        - TokenRelay

      globalcors:
        cors-configurations:
          '[/**]':
            allowedOrigins: "*"
            allowedMethods: "*"
            allowedHeaders: "*"
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true

      routes:
        - id: product-service
          uri: lb://product-service
          predicates:
            - Path=/api/products/**
          filters:
            - name: CircuitBreaker
              args:
                name: productCircuitBreaker
                fallbackUri: forward:/fallback/products
            - name: CorrelationIdFilter
            - name: RedisCacheFilter

        - id: inventory-service
          uri: lb://inventory-service
          predicates:
            - Path=/api/inventories/**
          filters:
            - name: CircuitBreaker
              args:
                name: inventoryCircuitBreaker
                fallbackUri: forward:/fallback/inventories
            - name: CorrelationIdFilter

        - id: order-service
          uri: lb://order-service
          predicates:
            - Path=/api/orders/**
          filters:
            - name: CircuitBreaker
              args:
                name: orderCircuitBreaker
                fallbackUri: forward:/fallback/orders
            - name: CorrelationIdFilter

        - id: payment-service
          uri: lb://payment-service
          predicates:
            - Path=/api/payments/**
          filters:
            - name: CircuitBreaker
              args:
                name: paymentCircuitBreaker
                fallbackUri: forward:/fallback/payments
            - name: CorrelationIdFilter
  data:
    redis:
      host: ${REDIS_HOST:redis}

logging:
  loki:
    url: http://loki:3100/loki/api/push

resilience4j:
  circuitbreaker:
    instances:
      productCircuitBreaker:
        registerHealthIndicator: true
        slidingWindowSize: 5
        minimumNumberOfCalls: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 6s
        permittedNumberOfCallsInHalfOpenState: 2

      orderCircuitBreaker:
        registerHealthIndicator: true
        slidingWindowSize: 5
        minimumNumberOfCalls: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 6s
        permittedNumberOfCallsInHalfOpenState: 2

      paymentCircuitBreaker:
        registerHealthIndicator: true
        slidingWindowSize: 5
        minimumNumberOfCalls: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 6s
        permittedNumberOfCallsInHalfOpenState: 2

      inventoryCircuitBreaker:
        registerHealthIndicator: true
        slidingWindowSize: 5
        minimumNumberOfCalls: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 6s
        permittedNumberOfCallsInHalfOpenState: 2

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://eureka-server:8761/eureka/
  instance:
    prefer-ip-address: true

management:
  endpoint:
    prometheus:
      access: unrestricted
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,threaddump,logfile,traces
  tracing:
    sampling:
      probability: 1.0
  zipkin:
    tracing:
      endpoint: http://zipkin:9411/api/spans

management.endpoint.gateway.access: unrestricted
management.endpoint.health.show-details: "ALWAYS"
