
services:
  order-service:
    build:
      context: ./order-service
      dockerfile: ../Dockerfile
    ports:
      - "8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://order-postgres:5432/orders_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      EUREKA_SERVER_URL: "http://eureka-server:8761/eureka/"
      SERVER_PORT: 8080
    depends_on:
      - order-postgres
      - eureka-server
    networks:
      - eureka-network
    deploy:
      replicas: 1
    volumes:
      - order_deps:/root/.m2

  order-postgres:
    image: postgres:15.4-alpine
    container_name: order-postgres
    ports:
      - "5432"
    environment:
      POSTGRES_DB: orders_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    networks:
      - eureka-network
    volumes:
      - order_data:/var/lib/postgresql/data

  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: ../Dockerfile
    depends_on:
      - product-service
      - inventory-postgres
      - eureka-server
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://inventory-postgres:5432/inventory_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      EUREKA_SERVER_URL: "http://eureka-server:8761/eureka/"
      SERVER_PORT: 8080
    ports:
      - "8080"
    networks:
      - eureka-network
    deploy:
      replicas: 1
    volumes:
      - inventory_deps:/root/.m2

  inventory-postgres:
    image: postgres:15.4-alpine
    container_name: inventory-postgres
    environment:
      POSTGRES_DB: inventory_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    networks:
      - eureka-network
    ports:
      - "5432"
    volumes:
      - inventory_data:/var/lib/postgresql/data

  payment-service:
    build:
      context: ./payment-service
      dockerfile: ../Dockerfile
    depends_on:
      - payment-postgres
      - eureka-server
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://payment-postgres:5432/payment_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      EUREKA_SERVER_URL: "http://eureka-server:8761/eureka/"
      SERVER_PORT: 8080
    ports:
      - "8080"
    networks:
      - eureka-network
    deploy:
      replicas: 1
    volumes:
      - payment_deps:/root/.m2

  payment-postgres:
    image: postgres:15.4-alpine
    container_name: payment-postgres
    environment:
      POSTGRES_DB: payment_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432"
    networks:
      - eureka-network
    volumes:
      - payment_data:/var/lib/postgresql/data

  product-service:
    build:
      context: ./product-service
      dockerfile: ../Dockerfile
    depends_on:
      - product-mongo
      - eureka-server
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATA_MONGODB_URI: mongodb://root:root@product-mongo:27017/product_db?authSource=admin
      SPRING_DATA_MONGODB_USERNAME: root
      SPRING_DATA_MONGODB_PASSWORD: root
      EUREKA_SERVER_URL: "http://eureka-server:8761/eureka/"
      SERVER_PORT: 8080
    ports:
      - "8080"
    networks:
      - eureka-network
    deploy:
      replicas: 1
    volumes:
      - product_deps:/root/.m2

  product-mongo:
    image: mongo:4.0
    container_name: product-mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    ports:
      - "27017"
    networks:
      - eureka-network
    volumes:
      - product_data:/data/db

  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - eureka-network

  gateway:
    build:
      context: ./gateway
      dockerfile: ../Dockerfile
    environment:
      SERVER_PORT: 8080
      SPRING_SECURITY_USER_PASSWORD: admin
      EUREKA_SERVER_URL: "http://eureka-server:8761/eureka/"
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      - eureka-server
      - redis
      - payment-service
      - product-service
      - order-service
      - inventory-service
      - zipkin
      - loki
    ports:
      - "8080:8080"
    networks:
      - eureka-network
    volumes:
      - gateway_deps:/root/.m2

  keycloak:
    image: quay.io/keycloak/keycloak:26.0.0
    command:
      - start-dev
      - --import-realm
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: keycloak-postgres
      KC_DB_URL_PORT: 5432
      KC_DB_URL_DATABASE: keycloak_db
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: 123456
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
    ports:
      - "9090:8080"
    depends_on:
      - keycloak-postgres
    networks:
      - eureka-network
    volumes:
      - ./store-microservices-realms.json:/opt/keycloak/data/import/store-microservices-realms.json

  keycloak-postgres:
    image: postgres:15.4-alpine
    container_name: keycloak-postgres
    environment:
      POSTGRES_DB: keycloak_db
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: 123456
    ports:
      - "5432"
    volumes:
      - keycloak_data:/var/lib/postgresql/data
    networks:
      - eureka-network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9091:9090"
    networks:
      - eureka-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - eureka-network
    restart: unless-stopped

  redis:
    image: redis:7.2-alpine
    container_name: redis-cache
    ports:
      - "6379:6379"
    networks:
      - eureka-network
    volumes:
      - redis_data:/data
    restart: unless-stopped

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - eureka-network
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.2
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    networks:
      - eureka-network
    volumes:
      - loki_data:/loki
    restart: unless-stopped

volumes:
  order_data:
  payment_data:
  product_data:
  inventory_data:
  order_deps:
  payment_deps:
  product_deps:
  inventory_deps:
  keycloak_data:
  gateway_deps:
  redis_data:
  loki_data:

networks:
  eureka-network:
    driver: bridge